generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  username        String            @unique
  email           String            @unique
  password        String
  role            Role              @default(user)
  createdAt       DateTime          @default(now())
  Cart            Cart[]
  Order           Order[]
  ProductFeedback ProductFeedback[]
}

enum Role {
  admin
  user
}

model Product {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  discount           Boolean?
  image              String
  newcollection      Boolean?
  hit                Boolean?
  discountpercentage Int?
  name               String
  description        String
  price              Int
  category           String
  stock              Int               @default(0)
  createdAt          DateTime          @default(now())
  CartItem           CartItem[]
  OrderItem          OrderItem[]
  ProductFeedback    ProductFeedback[]
}

model ProductFeedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  feedback  String
  rating    Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  cart      Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String? @db.ObjectId
}

model Cart {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique @db.ObjectId
  items  CartItem[]
}

enum Status {
  pending
  processing
  shipped
  delivered
  cancelled
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  totalPrice Int
  status     Status      @default(pending)
  createdAt  DateTime    @default(now())
  items      OrderItem[]
}
